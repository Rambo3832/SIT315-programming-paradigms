#include <iostream>
#include <cstdlib>
#include <chrono>
#include <omp.h> 

using namespace std;
using namespace std::chrono;

const int N = 300;

int main()
{
    cout << "Filling Matrixes with random values of size: " << N << endl;

    int A[N][N]; 
    int B[N][N]; 
    int C[N][N]; 

    srand(time(0)); 

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            A[i][j] = rand() % 100;
            B[i][j] = rand() % 100;
        }
    }

    auto start = high_resolution_clock::now(); 


    #pragma omp parallel for collapse(2)
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            C[i][j] = 0;
            for (int k = 0; k < N; k++)
            {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    auto end = high_resolution_clock::now(); 
    
    
    auto duration = duration_cast<microseconds>(end - start);
    cout << "Time taken for multiplication: " << duration.count()/1E6 << " seconds" << endl;

    return 0;
}
