#include <chrono>
#include <cstdlib>
#include <iostream>
#include <pthread.h>
#include <time.h>

using namespace std::chrono;
using namespace std;

struct ThreadData {
    int* v1;
    int* v2;
    int* v3;
    int size;
    int thread_id;
    int num_threads;
};

void randomVector(int vector[], int size) {
    for (int i = 0; i < size; i++) {
        vector[i] = rand() % 100;
    }
}

void* pthreadVectorAdd(void* arg) {
    struct ThreadData* data = (struct ThreadData*)arg;
    int size = data->size;
    int* v1 = data->v1;
    int* v2 = data->v2;
    int* v3 = data->v3;
    int thread_id = data->thread_id;
    int num_threads = data->num_threads;

    for (int i = thread_id; i < size; i += num_threads) {
        v3[i] = v1[i] + v2[i];
    }

    pthread_exit(NULL);
}

int main() {
    unsigned long size = 100000000;
    srand(time(0));
    int* v1 = (int*)malloc(size * sizeof(int));
    int* v2 = (int*)malloc(size * sizeof(int));
    int* v3 = (int*)malloc(size * sizeof(int));
    randomVector(v1, size);
    randomVector(v2, size);

    // Sequential Execution
    auto start_seq = high_resolution_clock::now();
    for (int i = 0; i < size; i++) {
        v3[i] = v1[i] + v2[i];
    }
    auto stop_seq = high_resolution_clock::now();
    auto duration_seq = duration_cast<microseconds>(stop_seq - start_seq);
    cout << "Sequential Execution Time: " << duration_seq.count() << " microseconds" << endl;

    // OpenMP Execution
auto start_omp = high_resolution_clock::now();
#pragma omp parallel default(none) shared(v1, v2, v3, size)
{
    #pragma omp for
    for (int i = 0; i < size; i++) {
        v3[i] = v1[i] + v2[i];
    }
}
auto stop_omp = high_resolution_clock::now();
auto duration_omp = duration_cast<microseconds>(stop_omp - start_omp);
cout << "OpenMP Execution Time: " << duration_omp.count() << " microseconds" << endl;


    // Pthread Execution
    int num_threads = 4; // You can adjust the number of threads as needed
    pthread_t threads[num_threads];
    struct ThreadData thread_data[num_threads];
    auto start_pthread = high_resolution_clock::now();
    for (int i = 0; i < num_threads; ++i) {
        thread_data[i].v1 = v1;
        thread_data[i].v2 = v2;
        thread_data[i].v3 = v3;
        thread_data[i].size = size;
        thread_data[i].thread_id = i;
        thread_data[i].num_threads = num_threads;
        pthread_create(&threads[i], NULL, pthreadVectorAdd, (void*)&thread_data[i]);
    }
    for (int i = 0; i < num_threads; ++i) {
        pthread_join(threads[i], NULL);
    }
    auto stop_pthread = high_resolution_clock::now();
    auto duration_pthread = duration_cast<microseconds>(stop_pthread - start_pthread);
    cout << "Pthread Execution Time: " << duration_pthread.count() << " microseconds" << endl;

    free(v1);
    free(v2);
    free(v3);

    return 0;
}
